name: üê≥ Docker CI for GameOps Lab

on:
  push:
    branches: [main]
  pull_request:

# Working -
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         game: [tetris, snake, brick_breaker]

# Testing for cross-platform artifact deploys
# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         game: [tetris, brick_breaker, snake]
#     name: Build ${{ matrix.game }} on ${{ matrix.os }}

# Testing for cross-platform artifact deploys
jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        game: [tetris, snake, brick_breaker]
      
    env:
      IMAGE_NAME: vladbelo2/${{ matrix.game }}

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      # Testing for cross-platform artifact deploys
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Testing for cross-platform artifact deploys
      - name: üì¶ Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller pygame
          
      # Working -
      # - name: üßπ Prepare Docker build context
      #   run: |
      #     cp -r games/${{ matrix.game }} docker/${{ matrix.game }}

      # Testing for cross-platform artifact deploys
      - name: üõ†Ô∏è Build Game Binary
        shell: bash  # Forces consistent shell on all OSs
        run: |
          cd games/${{ matrix.game }}
          SEP=":"
          if [[ "$RUNNER_OS" == "Windows" ]]; then SEP=";"; fi
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "assets${SEP}assets" \
            --name ${{ matrix.game }} main.py
            
      # Working -
      # - name: üê≥ Build Docker Image
      #   run: |
      #     docker build \
      #       -t $IMAGE_NAME:ci \
      #       -f docker/Dockerfile \
      #       --build-arg GAME_NAME=${{ matrix.game }} \
      #       docker/

      # Working -
      # - name: üöÄ Run Headless Test
      #   run: |
      #     docker run --rm \
      #       -e HEADLESS_TEST=1 \
      #       $IMAGE_NAME:ci

      # Working -
      # - name: üì¶ Extract dist folder
      #   run: |
      #     CID=$(docker create $IMAGE_NAME:ci)
      #     docker cp "$CID:/app/dist/${{ matrix.game }}" "./${{ matrix.game }}-dist"
      #     docker rm "$CID"

      # Testing for cross-platform artifact deploys
      - name: üì§ Upload Game Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-linux-binary
          path: games/${{ matrix.game }}/dist/${{ matrix.game }}/

      # Working -
      # - name: üíæ Upload binary artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.game }}-binary
      #     path: ${{ matrix.game }}-dist/

      # Working -
      # - name: üîê Login to Docker Hub
      #   env:
      #     USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      #   if: ${{ env.USERNAME != '' && env.TOKEN != '' }}
      #   run: echo "$TOKEN" | docker login -u "$USERNAME" --password-stdin
        
      # Working -
      # - name: ‚òÅÔ∏è Push to Docker Hub
      #   env:
      #     USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      #   if: ${{ env.USERNAME != '' && env.TOKEN != '' }}
      #   run: |
      #     docker tag $IMAGE_NAME:ci $IMAGE_NAME:latest
      #     docker push $IMAGE_NAME:latest

# Testing for cross-platform artifact deploys
  build-macos:
    needs: build-linux
    runs-on: macos-latest
    strategy:
      matrix:
        game: [tetris, snake, brick_breaker]
      
    env:
      IMAGE_NAME: vladbelo2/${{ matrix.game }}

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      # Testing for cross-platform artifact deploys
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Testing for cross-platform artifact deploys
      - name: üì¶ Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller pygame

      # Testing for cross-platform artifact deploys
      - name: üõ†Ô∏è Build Game Binary
        shell: bash  # Forces consistent shell on all OSs
        run: |
          cd games/${{ matrix.game }}
          SEP=":"
          if [[ "$RUNNER_OS" == "Windows" ]]; then SEP=";"; fi
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "assets${SEP}assets" \
            --name ${{ matrix.game }} main.py
            
      # Testing for cross-platform artifact deploys
      - name: üì§ Upload Game Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-macos-binary
          path: games/${{ matrix.game }}/dist/${{ matrix.game }}/

  # Testing for cross-platform artifact deploys
  build-windows:
    needs: build-macos
    runs-on: windows-latest
    strategy:
      matrix:
        game: [tetris, snake, brick_breaker]
      
    env:
      IMAGE_NAME: vladbelo2/${{ matrix.game }}

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      # Testing for cross-platform artifact deploys
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Testing for cross-platform artifact deploys
      - name: üì¶ Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller pygame

      # Testing for cross-platform artifact deploys
      - name: üõ†Ô∏è Build Game Binary
        shell: bash  # Forces consistent shell on all OSs
        run: |
          cd games/${{ matrix.game }}
          SEP=":"
          if [[ "$RUNNER_OS" == "Windows" ]]; then SEP=";"; fi
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "assets${SEP}assets" \
            --name ${{ matrix.game }} main.py

      # Testing for cross-platform artifact deploys
      - name: üì§ Upload Game Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-windows-binary
          path: games/${{ matrix.game }}/dist/${{ matrix.game }}/
