name: 🛠️ GameOps Lab - Cross Platform Builds

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: 🔧 Build ${{ matrix.game }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            game: tetris
          - os: ubuntu-latest
            game: snake
          - os: ubuntu-latest
            game: brick_breaker
          - os: macos-latest
            game: tetris
          - os: macos-latest
            game: snake
          - os: macos-latest
            game: brick_breaker
          - os: windows-latest
            game: tetris
          - os: windows-latest
            game: snake
          - os: windows-latest
            game: brick_breaker

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🐢 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📚 Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller pygame

      - name: 💡 Build Binary
        run: |
          cd games/${{ matrix.game }}
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "assets:assets" \
            --name ${{ matrix.game }} main.py

      - name: 🪐 Package as AppImage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y appimagetool
          cd games/${{ matrix.game }}
          mkdir -p AppDir/usr/bin
          cp dist/${{ matrix.game }} AppDir/usr/bin/
          chmod +x AppDir/usr/bin/${{ matrix.game }}

          # Desktop entry
          printf "[Desktop Entry]\nName=%s\nExec=%s\nIcon=%s\nType=Application\nCategories=Game\n" \
            "${{ matrix.game }}" "${{ matrix.game }}" "${{ matrix.game }}" \
            > AppDir/${{ matrix.game }}.desktop

          # Icon fallback (use generic one if missing)
          if [ ! -f assets/icon.png ]; then
            echo "🔹 No icon.png found, using default fallback."
            mkdir -p AppDir
            cp ../../assets/default-icon.png AppDir/${{ matrix.game }}.png
          else
            cp assets/icon.png AppDir/${{ matrix.game }}.png
          fi

          appimagetool AppDir ../${{ matrix.game }}.AppImage

      - name: 📄 Upload AppImage Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-linux-AppImage
          path: games/${{ matrix.game }}/${{ matrix.game }}.AppImage

      - name: 📄 Upload macOS .app Artifact
        if: matrix.os == 'macos-latest'
        run: |
            cd games/${{ matrix.game }}
            cat <<EOF > setup.py
            from setuptools import setup
            APP = ['main.py']
            DATA_FILES = [('assets', ['assets/DejaVuSans.ttf'])]
            OPTIONS = {'argv_emulation': True, 'packages': ['pygame']}
            setup(app=APP, data_files=DATA_FILES, options={'py2app': OPTIONS})
            EOF

            python3 setup.py py2app

      - name: 📄 Upload macOS Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-macOS-app
          path: games/${{ matrix.game }}/dist/${{ matrix.game }}.app

      - name: 🚀 Build Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
            echo "Outfile \"${{ matrix.game }}-setup.exe\"" > installer.nsi
            echo "InstallDir \"$PROGRAMFILES\\${{ matrix.game }}\"" >> installer.nsi
            echo "Page Directory" >> installer.nsi
            echo "Page InstFiles" >> installer.nsi
            echo "Section" >> installer.nsi
            echo "  SetOutPath \"$INSTDIR\"" >> installer.nsi
            echo "  File \"dist\\${{ matrix.game }}.exe\"" >> installer.nsi
            echo "SectionEnd" >> installer.nsi
            makensis installer.nsi

      - name: 📄 Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-windows-installer
          path: games/${{ matrix.game }}/${{ matrix.game }}-setup.exe
