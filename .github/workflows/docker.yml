name: 🛠️ GameOps Lab - Cross Platform Builds

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: 🔧 Build ${{ matrix.game }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            game: tetris
          - os: ubuntu-latest
            game: snake
          - os: ubuntu-latest
            game: brick_breaker
          - os: macos-latest
            game: tetris
          - os: macos-latest
            game: snake
          - os: macos-latest
            game: brick_breaker
          - os: windows-latest
            game: tetris
          - os: windows-latest
            game: snake
          - os: windows-latest
            game: brick_breaker

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4

      - name: 🐢 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📚 Install Dependencies
        run: |
          sudo apt update && sudo apt install -y fuse libfuse2
          if ! command -v appimagetool &> /dev/null; then
            wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
            chmod +x appimagetool
            sudo mv appimagetool /usr/local/bin/appimagetool
          fi

          pip install --upgrade pip
          pip install pyinstaller pygame

      - name: 💡 Build Binary
        if: matrix.os != 'windows-latest'
        run: |
          cd games/${{ matrix.game }}
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "assets:assets" \
            --name ${{ matrix.game }} main.py

      - name: 🪐 Package as AppImage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd games/${{ matrix.game }}
          mkdir -p AppDir/usr/bin
          cp dist/${{ matrix.game }} AppDir/usr/bin/
          chmod +x AppDir/usr/bin/${{ matrix.game }}

          # Desktop entry
          echo "[Desktop Entry]" > AppDir/${{ matrix.game }}.desktop
          echo "Name=${{ matrix.game }}" >> AppDir/${{ matrix.game }}.desktop
          echo "Exec=${{ matrix.game }}" >> AppDir/${{ matrix.game }}.desktop
          echo "Icon=${{ matrix.game }}" >> AppDir/${{ matrix.game }}.desktop
          echo "Type=Application" >> AppDir/${{ matrix.game }}.desktop
          echo "Categories=Game;" >> AppDir/${{ matrix.game }}.desktop

          # Icon fallback
          if [ ! -f assets/icon.png ]; then
            echo "🔹 No icon.png found, skipping icon setup."
          else
            cp assets/icon.png AppDir/${{ matrix.game }}.png
          fi

          appimagetool AppDir ../${{ matrix.game }}.AppImage

      - name: 📄 Upload AppImage Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-linux-AppImage
          path: games/${{ matrix.game }}/${{ matrix.game }}.AppImage

      - name: 📦 Install py2app (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          pip install py2app

      - name: 📥 Copy setup.py template
        if: matrix.os == 'macos-latest'
        run: |
            cp scripts/py2app_setup_template.py games/${{ matrix.game }}/setup.py

      - name: 🍎 Build macOS .app
        if: matrix.os == 'macos-latest'
        run: |
          cd games/${{ matrix.game }}
          python3 setup.py py2app

      - name: 📄 Upload macOS .app Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-macOS-app
          path: games/${{ matrix.game }}/dist/${{ matrix.game }}.app

      - name: 🪟 Build Windows Executable
        if: matrix.os == 'windows-latest'
        run: |
          pip install pyinstaller pygame
          cd games/${{ matrix.game }}
          pyinstaller --noconfirm --onefile --windowed --add-data "assets;assets" --name ${{ matrix.game }} main.py

      - name: 🚀 Create Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          cd games/${{ matrix.game }}
          echo 'Outfile "${{ matrix.game }}-setup.exe"' > installer.nsi
          echo 'InstallDir "$PROGRAMFILES\\${{ matrix.game }}"' >> installer.nsi
          echo 'Page Directory' >> installer.nsi
          echo 'Page InstFiles' >> installer.nsi
          echo 'Section' >> installer.nsi
          echo '  SetOutPath "$INSTDIR"' >> installer.nsi
          echo '  File "dist\\${{ matrix.game }}.exe"' >> installer.nsi
          echo 'SectionEnd' >> installer.nsi
          makensis installer.nsi

      - name: 📄 Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.game }}-windows-installer
          path: games/${{ matrix.game }}/${{ matrix.game }}-setup.exe
