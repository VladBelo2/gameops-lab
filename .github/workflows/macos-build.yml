name: Build Game for macOS

on:
  workflow_call:
    inputs:
      game_name:
        required: true
        type: string
      arch:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.arch == 'arm64' && 'macos-14' || 'macos-13' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # - name: üìö Install py2app and deps
      #   run: |
      #     pip install --upgrade pip
      #     pip install py2app pygame pillow

      # - name: üéØ Fetch latest SDL2
      #   run: |
      #     SDL2_RELEASES_API="https://api.github.com/repos/libsdl-org/SDL/releases"
      #     SDL2_LATEST=$(curl -s "$SDL2_RELEASES_API" | jq -r '.[].tag_name' | grep -E '^release-2\.' | sort -Vr | head -n 1)
      #     SDL2_VERSION="${SDL2_LATEST#release-}"
      #     SDL2_ZIP="SDL2-${SDL2_VERSION}.zip"
      #     SDL2_URL="https://github.com/libsdl-org/SDL/releases/download/${SDL2_LATEST}/${SDL2_ZIP}"
      #     curl -LO "$SDL2_URL"
      #     unzip -q "$SDL2_ZIP" -d sdl2
      #     mkdir -p .dylibs
      #     cp sdl2/SDL2.framework/Versions/A/SDL2 .dylibs/libSDL2-2.0.0.dylib

      # - name: üì¶ Install SDL2 (macOS)
      #   run: |
      #     brew install sdl2
      #     mkdir -p .dylibs
      #     LIB_PATH=$(find /opt/homebrew/lib /usr/local/lib -name "libSDL2.dylib" 2>/dev/null | head -n 1)
      #     cp "$LIB_PATH" .dylibs/libSDL2-2.0.0.dylib

      # - name: üß© Ensure jq is installed
      #   run: |
      #     if ! command -v jq &> /dev/null; then
      #       echo "installing jq"
      #       brew install jq
      #     else
      #       echo "jq already installed"
      #     fi
                
      - name: üì¶ Install SDL2 (macOS)
        run: |
          cd games/${{ inputs.game_name }}
          set -eo pipefail

          echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
          echo "üîç Fetching latest SDL2 release..."
          echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
          SDL2_RELEASES_API="https://api.github.com/repos/libsdl-org/SDL/releases"
          echo "DEBUG: SDL2_RELEASES_API=$SDL2_RELEASES_API"

          if ! command -v jq &>/dev/null; then
            echo "üì¶ Installing jq..."
            brew install jq
          else
            echo "üì¶ jq already installed ‚úÖ"
          fi

          echo "üß™ DEBUG: Running curl to fetch JSON..."
          curl -s "$SDL2_RELEASES_API" > sdl2_releases.json

          echo "üìÑ DEBUG: First 40 lines of sdl2_releases.json"
          head -n 40 sdl2_releases.json || echo "‚ö†Ô∏è Could not preview JSON"

          echo "üîç Extracting tag name from JSON..."
          SDL2_LATEST=$(cat sdl2_releases.json | jq -r '.[].tag_name' | grep -E '^release-2\.' | sort -Vr | head -n 1)
          echo "DEBUG: SDL2_LATEST=$SDL2_LATEST"

          if [[ -z "$SDL2_LATEST" ]]; then
            echo "‚ùå Could not find a valid SDL2 release tag"
            echo "üîé Dumping full JSON file for review:"
            cat sdl2_releases.json
            exit 1
          fi

          SDL2_VERSION="${SDL2_LATEST#release-}"
          SDL2_ZIP="SDL2-${SDL2_VERSION}.zip"
          SDL2_URL="https://github.com/libsdl-org/SDL/releases/download/${SDL2_LATEST}/${SDL2_ZIP}"

          echo "DEBUG: SDL2_VERSION=$SDL2_VERSION"
          echo "DEBUG: SDL2_ZIP=$SDL2_ZIP"
          echo "DEBUG: SDL2_URL=$SDL2_URL"

          echo "üåê Downloading SDL2 from: $SDL2_URL"
          curl -LO "$SDL2_URL"

          echo "üì¶ Unzipping $SDL2_ZIP..."
          unzip -q "$SDL2_ZIP" -d sdl2

          echo "üìÅ Listing sdl2/ directory contents:"
          find sdl2/

          echo "üìÇ Creating .dylibs folder and copying SDL2 binary..."
          mkdir -p .dylibs
          cp sdl2/SDL2.framework/Versions/A/SDL2 .dylibs/libSDL2-2.0.0.dylib

          echo "‚úÖ SDL2 successfully set up!"

      - name: üß± Build .app
        run: |
          cd games/${{ inputs.game_name }}
          python3 -m venv .venv-macos-${{ inputs.arch }}
          source .venv-macos-${{ inputs.arch }}/bin/activate
          pip install --upgrade pip
          pip install py2app pygame pillow
          python3 -c "from PIL import Image; im=Image.open('assets/default-icon.png'); im.save('assets/icon.icns', format='ICNS')"
          python3 setup.py py2app

      - name: üì¶ Upload Artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.game_name }}-macos
          path: games/${{ inputs.game_name }}/dist/${{ inputs.game_name }}